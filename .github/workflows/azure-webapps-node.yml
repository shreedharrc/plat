name: Deploy Infrastructure 


on:
  push:
    branches: [ main ]
    paths:
    
     - '.github/workflows/azure-webapps-node.yml'
    # - 'src/biceps/*'
   
permissions:
      id-token: write
      contents: read
      
jobs:
  deploy-to-dev:
    runs-on: ubuntu-latest
    env:
      companybbr: "cm"
      Applicationname: "website"
      ResourceGroupLocation: "eastus"
      type: "internal"
      Appplicationtype: "portal"
      envtype: "dev"
      appID: "test3"
      sku: "B1"
      linuxFxVersion : "node|14-lts"
      cosdb-account-name : "cosdb-account3" 
      cosdb-name : "cosdb3"
      mongo-serv-version: "3.6"
      storage-account : "blobstore3"
      priv-zoneName : "privatelink.documents.azure.com"
      zoneName : "priv-zone3" 
    steps:
    
      # Checkout code
      - uses: actions/checkout@main
      
       # Log into Azure
      - name: OIDC Login to Azure Public Cloud with AzPowershell (enableAzPSSession true)
        uses: azure/login@v1
        with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }} 
            enable-AzPSSession: true
            
            
      

      
      - name: Azure CLI Action
        uses: Azure/cli@v1
        with:
          # Specify the script here.
          inlineScript: 
             #!/bin/bash
             az group create --name rg-${{ env.companybbr }}-${{ env.envtype }}-${{ env.Applicationname }}-${{env.appID}} --location ${{ env.ResourceGroupLocation }} --tags "type=${{ env.type }}" "ApplicationType=${{ env.Appplicationtype }}"

      - name: Azure CLI Action
        uses: Azure/cli@v1
        with:
          # Specify the script here
          inlineScript: 
             #!/bin/bash
               az group create --name rg-${{ env.companybbr }}-${{ env.envtype }}-security-${{env.appID}} --location ${{ env.ResourceGroupLocation }} --tags "type=${{ env.type }}" "ApplicationType=${{ env.Appplicationtype }}"

        # Storage creation
      - name: Azure Blob creation
        uses: Azure/cli@v1
        with:
          # Specify the script here
          inlineScript: |
            az storage account create --name ${{ env.storage-account }}${{ env.companybbr }}${{ env.envtype }} --resource-group rg-${{ env.companybbr }}-${{ env.envtype }}-website-${{env.appID}} --location ${{ env.ResourceGroupLocation }} --sku Standard_ZRS
            az storage container create --name container-${{ env.storage-account }}${{ env.companybbr }}${{ env.envtype }} --account-name ${{ env.storage-account }}${{ env.companybbr }}${{ env.envtype }}       
       
      
      # Deploy vnet spoke.............
      - name: Deploy Spoke vNet infrastructure 
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          resourceGroupName: rg-${{ env.companybbr }}-${{ env.envtype }}-security-${{env.appID}}
          template: src/biceps/vnet_spoke.bicep
          parameters: "name=vnet-${{ env.companybbr }}-${{ env.envtype }}"
          failOnStdErr: false
          
          
      
          
      # Deploy vnet hub............
      - name: Deploy Hub vNet infrastructure 
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          resourceGroupName: rg-${{ env.companybbr }}-${{ env.envtype }}-security-${{env.appID}}
          template: src/biceps/vnet_hub.bicep
          parameters: "name=vnet-${{ env.companybbr }}-${{ env.envtype }}"
          failOnStdErr: false
          
          
      # service connection creation on backend-subnet for cosmos db
      - name: Azure service connection creation on backend-subnet
        uses: Azure/cli@v1
        with:
          # Specify the script here
          inlineScript:
            az network vnet subnet update --resource-group rg-${{ env.companybbr }}-${{ env.envtype }}-security-${{env.appID}} --vnet-name vnet-${{ env.companybbr }}-${{ env.envtype }}-spoke --name backend-subnet --service-endpoints "Microsoft.AzureCosmosDB"
      
          
          
     # Cosmos-db creation
      - name: Azure Cosmos-db creation
        uses: Azure/cli@v1
        with:
          # Specify the script here
          inlineScript: | 
            svcEndpoint=$(az network vnet subnet show --resource-group rg-${{ env.companybbr }}-${{ env.envtype }}-security-${{env.appID}} --name backend-subnet --vnet-name vnet-${{ env.companybbr }}-${{ env.envtype }}-spoke --query 'id' -o tsv)
            az cosmosdb create --resource-group rg-${{ env.companybbr }}-${{ env.envtype }}-website-${{env.appID}} --name ${{ env.cosdb-account-name }} --kind MongoDB --server-version ${{ env.mongo-serv-version }} --default-consistency-level "Strong" --enable-virtual-network true --virtual-network-rules $svcEndpoint
            az cosmosdb mongodb database create --account-name ${{ env.cosdb-account-name }} --name ${{ env.cosdb-name }} --resource-group rg-${{ env.companybbr }}-${{ env.envtype }}-website-${{env.appID}}

     # Private-endpoint cosmos-db and Blob-storage
      - name: Azure Private-endpoint Cosmos-db creation
        uses: Azure/cli@v1
        with:
          # Specify the script here
          inlineScript: | 
                svcEndpoint=$(az network vnet subnet show --resource-group rg-${{ env.companybbr }}-${{ env.envtype }}-security-${{env.appID}} --name backend-subnet --vnet-name vnet-${{ env.companybbr }}-${{ env.envtype }}-spoke --query 'id' -o tsv)
                az cosmosdb network-rule add --name ${{ env.cosdb-account-name }} --resource-group rg-${{ env.companybbr }}-${{ env.envtype }}-website-${{env.appID}} --subnet $svcEndpoint --ignore-missing-vnet-service-endpoint true
                az network private-endpoint create --name Priv-Endpoint-${{ env.companybbr }}-${{ env.envtype }}-security-${{env.appID}} --resource-group rg-${{ env.companybbr }}-${{ env.envtype }}-security-${{env.appID}} --vnet-name vnet-${{ env.companybbr }}-${{ env.envtype }}-spoke --subnet backend-subnet  --private-connection-resource-id "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/rg-${{ env.companybbr }}-${{ env.envtype }}-website-${{env.appID}}/providers/Microsoft.DocumentDB/databaseAccounts/${{ env.cosdb-account-name }}" --group-id MongoDB --connection-name priv-conn-${{ env.companybbr }}-${{ env.envtype }}-cosmosdb-${{env.appID}}
                az network private-endpoint create --name Priv-Endpoint-${{ env.companybbr }}-${{ env.envtype }}-security-${{env.appID}}-blob --resource-group rg-${{ env.companybbr }}-${{ env.envtype }}-security-${{env.appID}} --vnet-name vnet-${{ env.companybbr }}-${{ env.envtype }}-spoke --subnet backend-subnet  --private-connection-resource-id "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/rg-${{ env.companybbr }}-${{ env.envtype }}-website-${{env.appID}}/providers/Microsoft.Storage/storageAccounts/${{ env.storage-account }}${{ env.companybbr }}${{ env.envtype }}" --group-id blob  --connection-name priv-conn-${{ env.companybbr }}-${{ env.envtype }}-storage-${{env.appID}}
      
      
      # Private-DNS cosmos-db and Blob-storage
      - name: Azure Private-endpoint Cosmos-db creation
        uses: Azure/cli@v1
        with:
          # Specify the script here
          inlineScript: |          
                az network private-dns zone create --name "privatelink.blob.core.windows.net" -g rg-${{ env.companybbr }}-${{ env.envtype }}-security-${{env.appID}}
                az network private-dns link vnet create --resource-group rg-${{ env.companybbr }}-${{ env.envtype }}-security-${{env.appID}} --zone-name "privatelink.blob.core.windows.net" --name ${{ env.zoneName }} --virtual-network vnet-${{ env.companybbr }}-${{ env.envtype }}-spoke --registration-enabled false
                private_dns_link_id=$(az network private-dns link vnet show --name ${{ env.zoneName }} --zone-name "privatelink.blob.core.windows.net" -g rg-${{ env.companybbr }}-${{ env.envtype }}-security-${{env.appID}} --query "id" --output tsv)
                
                az network private-dns link vnet create --name storage_bastion_private_dns_link --virtual-network $bastion_vnet_id --zone-name "privatelink.blob.core.windows.net" --registration-enabled false -g $rg_name

                bastion_private_dns_link_id=$(az network private-dns link vnet show --name $storage_bastion_private_dns_link_name --zone-name "privatelink.blob.core.windows.net" -g $rg_name --query "id" --output tsv)

                str_acc_id=$(az storage account show --name ${{ env.storage-account }}${{ env.companybbr }}${{ env.envtype }} --resource-group rg-${{ env.companybbr }}-${{ env.envtype }}-website-${{env.appID}} --query "id" --output tsv)
                az network private-link-resource list --id $str_acc_id
                storage_private_endpoint_id=$(az network private-endpoint show --name  Priv-Endpoint-${{ env.companybbr }}-${{ env.envtype }}-security-${{env.appID}}-blob -g rg-${{ env.companybbr }}-${{ env.envtype }}-security-${{env.appID}} --query id -o tsv)
                network_interface_id=$(az network private-endpoint show --name Priv-Endpoint-${{ env.companybbr }}-${{ env.envtype }}-security-${{env.appID}}-blob -g rg-${{ env.companybbr }}-${{ env.envtype }}-security-${{env.appID}} --query 'networkInterfaces[0].id' -o tsv)
                storage_network_interface_private_ip=$(az resource show --ids $network_interface_id --api-version 2019-04-01 --query 'properties.ipConfigurations[0].properties.privateIPAddress' --output tsv)
                az network private-dns record-set a add-record -g rg-${{ env.companybbr }}-${{ env.envtype }}-security-${{env.appID}} --record-set-name ${{ env.storage-account }}${{ env.companybbr }}${{ env.envtype }} --zone-name privatelink.blob.core.windows.net --ipv4-address $storage_network_interface_private_ip

       # this step to configuire App Service...
          
   
       # Deploy Bicep file
      - name: Deploy App Service Plan
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          resourceGroupName: rg-${{ env.companybbr }}-${{ env.envtype }}-${{ env.Applicationname }}-${{env.appID}}
          template: src/biceps/app_plan_svc.bicep
          parameters: "appPlanName=${{ env.companybbr }}-${{ env.envtype }}-website-${{env.appID}} sku=${{env.sku}} webAppName=${{ env.companybbr }}-${{ env.envtype }}-website-${{env.appID}} linuxFxVersion=${{env.linuxFxVersion}}"
          failOnStdErr: false
      

       
        # Add Access Restriction
          
      - name: Azure CLI Action to Restrict Access
        uses: Azure/cli@v1
        with:
          # Specify the script here
          inlineScript: |
             az webapp config access-restriction add --resource-group rg-${{ env.companybbr }}-${{ env.envtype }}-website-${{env.appID}} --name wapp-${{ env.companybbr }}-${{ env.envtype }}-website-${{env.appID}} --action Deny --ip-address 0.0.0.0/32 --priority 100 --vnet-resource-group rg-${{ env.companybbr }}-${{ env.envtype }}-security-${{env.appID}}
             az webapp config access-restriction add --resource-group rg-${{ env.companybbr }}-${{ env.envtype }}-website-${{env.appID}} --name wapp-${{ env.companybbr }}-${{ env.envtype }}-website-${{env.appID}} --action Allow --vnet-name vnet-${{ env.companybbr }}-${{ env.envtype }}-hub --subnet gateway-subnet --priority 99 --vnet-resource-group rg-${{ env.companybbr }}-${{ env.envtype }}-security-${{env.appID}}
      
      # Add Vnet Integration
      - name: Azure CLI Action to Vnet-Integration
        uses: Azure/cli@v1
        with:
          # Specify the script here
          inlineScript:
             az webapp vnet-integration add -g rg-${{ env.companybbr }}-${{ env.envtype }}-website-${{env.appID}} -n wapp-${{ env.companybbr }}-${{ env.envtype }}-website-${{env.appID}} --vnet /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/rg-${{ env.companybbr }}-${{ env.envtype }}-security-${{env.appID}}/providers/Microsoft.Network/virtualNetworks/vnet-${{ env.companybbr }}-${{ env.envtype }}-spoke --subnet /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/rg-${{ env.companybbr }}-${{ env.envtype }}-security-${{env.appID}}/providers/Microsoft.Network/virtualNetworks/vnet-${{ env.companybbr }}-${{ env.envtype }}-spoke/subnets/appsrv-subnet
             az webapp config appsettings set --name vnet-route --settings WEBSITE_VNET_ROUTE_ALL=1  WEBSITE_DNS_SERVER 168.63.129.16

     
        

          
      
